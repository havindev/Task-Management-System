{"ast":null,"code":"export const migrateLocalStorageToAPI=async(vercelAPI,userId)=>{try{// Check if migration already done\nconst migrationKey=\"migrated_\".concat(userId);if(localStorage.getItem(migrationKey)){return false;}// Get old tasks from localStorage\nconst oldTasks=localStorage.getItem('tasks');if(!oldTasks){return false;}const tasks=JSON.parse(oldTasks);const userTasks=tasks.filter(task=>task.userId===userId||task.userId===String(userId));if(userTasks.length===0){return false;}// Migrate each task to API\nlet migratedCount=0;for(const task of userTasks){try{await vercelAPI.createTask(task,userId);migratedCount++;}catch(error){// Skip failed migrations\n}}// Mark migration as completed\nlocalStorage.setItem(migrationKey,'true');return migratedCount>0;}catch(error){// Migration failed silently\nreturn false;}};","map":{"version":3,"names":["migrateLocalStorageToAPI","vercelAPI","userId","migrationKey","concat","localStorage","getItem","oldTasks","tasks","JSON","parse","userTasks","filter","task","String","length","migratedCount","createTask","error","setItem"],"sources":["/Users/havin/Desktop/Learning/Lap Trinh/ReactJs/task-manager/frontend/src/utils/dataMigration.js"],"sourcesContent":["export const migrateLocalStorageToAPI = async (vercelAPI, userId) => {\n  try {\n    // Check if migration already done\n    const migrationKey = `migrated_${userId}`;\n    if (localStorage.getItem(migrationKey)) {\n      return false;\n    }\n\n    // Get old tasks from localStorage\n    const oldTasks = localStorage.getItem('tasks');\n    if (!oldTasks) {\n      return false;\n    }\n\n    const tasks = JSON.parse(oldTasks);\n    const userTasks = tasks.filter(task => task.userId === userId || task.userId === String(userId));\n    \n    if (userTasks.length === 0) {\n      return false;\n    }\n\n\n    // Migrate each task to API\n    let migratedCount = 0;\n    for (const task of userTasks) {\n      try {\n        await vercelAPI.createTask(task, userId);\n        migratedCount++;\n      } catch (error) {\n        // Skip failed migrations\n      }\n    }\n\n    // Mark migration as completed\n    localStorage.setItem(migrationKey, 'true');\n    \n    return migratedCount > 0;\n    \n  } catch (error) {\n    // Migration failed silently\n    return false;\n  }\n};"],"mappings":"AAAA,MAAO,MAAM,CAAAA,wBAAwB,CAAG,KAAAA,CAAOC,SAAS,CAAEC,MAAM,GAAK,CACnE,GAAI,CACF;AACA,KAAM,CAAAC,YAAY,aAAAC,MAAA,CAAeF,MAAM,CAAE,CACzC,GAAIG,YAAY,CAACC,OAAO,CAACH,YAAY,CAAC,CAAE,CACtC,MAAO,MAAK,CACd,CAEA;AACA,KAAM,CAAAI,QAAQ,CAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC9C,GAAI,CAACC,QAAQ,CAAE,CACb,MAAO,MAAK,CACd,CAEA,KAAM,CAAAC,KAAK,CAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAC,CAClC,KAAM,CAAAI,SAAS,CAAGH,KAAK,CAACI,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACX,MAAM,GAAKA,MAAM,EAAIW,IAAI,CAACX,MAAM,GAAKY,MAAM,CAACZ,MAAM,CAAC,CAAC,CAEhG,GAAIS,SAAS,CAACI,MAAM,GAAK,CAAC,CAAE,CAC1B,MAAO,MAAK,CACd,CAGA;AACA,GAAI,CAAAC,aAAa,CAAG,CAAC,CACrB,IAAK,KAAM,CAAAH,IAAI,GAAI,CAAAF,SAAS,CAAE,CAC5B,GAAI,CACF,KAAM,CAAAV,SAAS,CAACgB,UAAU,CAACJ,IAAI,CAAEX,MAAM,CAAC,CACxCc,aAAa,EAAE,CACjB,CAAE,MAAOE,KAAK,CAAE,CACd;AAAA,CAEJ,CAEA;AACAb,YAAY,CAACc,OAAO,CAAChB,YAAY,CAAE,MAAM,CAAC,CAE1C,MAAO,CAAAa,aAAa,CAAG,CAAC,CAE1B,CAAE,MAAOE,KAAK,CAAE,CACd;AACA,MAAO,MAAK,CACd,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}